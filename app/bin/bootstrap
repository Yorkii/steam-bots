#!/usr/bin/env node

var cluster = require('cluster');

if (cluster.isMaster) {
    cluster.fork();
    cluster.on('exit', function(worker, code, signal) {
        if (code > 0) {
            setTimeout( function(){
                cluster.fork();
            }, 30000);

            console.log('Restarting bot server in 30s...');
        }
    });

    return;
}


var app = require('../app');
var config = require('../config/config');
var debug = require('debug')('csgo-api:server');
var http = require('http');
var port = normalizePort(config.port);

app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    debug('Listening on ' + bind);
}

process.on('uncaughtException', function(err) {
    console.log('uncaughtException', err.message);
    console.log('uncaughtException', err.stack);

    setTimeout(function () {
        process.exit(1);
    }, 1000);
});